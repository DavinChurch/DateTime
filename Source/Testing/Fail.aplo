 rpt←{left}(testfn Fail expect)right;at;result;validate;⎕TRAP;nrr;failure;⎕IO;IO
 ⍝ Perform a unit-test on a simple function call that takes arguments and returns a result.
 ⍝ Execute <testfn> with arguments {left} and <right> and expect it to ⎕SIGNAL an error
 ⍝ where ⎕EN∊<expect> (if numeric) or <expect>≡⊃⎕DM (if character).
 ⍝ It is not expected to fail inside of the testing function itself, only by using ⎕SIGNAL.
 ⍝ <expect> may be a data value to match (as above) or a function that will validate
 ⍝ the error that was produced (where arguments provided are ⍺←⎕EN and ⍵←⊃⎕DM) and return
 ⍝ a 1 if the error was expected and 0 if not.
 ⍝ A global variable StopOnError may be set to any of the following values
 ⍝  0←Do not stop, just report invalid results
 ⍝  1←Stop in the testing function on the line that did not validate [Default]
 ⍝  2←Stop in the tested function at the original error without any error trapping
 ⍝  ¯1←Do not stop, and increment global variable "Errors" if it exists
 ⍝ See also ∇Pass/∇Pass_ to run tests that do not signal errors.

 IO←⎕IO ⋄ ⎕IO←1 ⋄ rpt←0 0⍴'' ⋄ at←⊃⎕AT'testfn' ⋄ nrr←at[1]=0
 'Test-fn is niladic'⎕SIGNAL 2/⍨at[2]=0
 'Test-fn is monadic'⎕SIGNAL 2/⍨(at[2]=1)∧0≠⎕NC'left'
 'Test-fn is dyadic'⎕SIGNAL 2/⍨(at[2]=2)∧0=⎕NC'left'
 :If 0=⎕NC'left' ⋄ left←⊢ ⋄ :EndIf
 :Select ⊃⎕NC'expect'
 :Case 2 ⍝ A data value to match the result
     :If (10|⎕DR expect)∊0 2
         validate←{expect≡⍵} ⍝ ⊃⎕DM comparison
     :Else
         validate←{⍺∊expect} ⍝ ⎕EN comparison
     :EndIf
 :Case 3 ⍝ A function to validate the result
     at←⊃⎕AT'expect'
     'Validation-fn does not return a result'⎕SIGNAL 2/⍨at[1]=0
     :Select at[2]
     :Case 0 ⋄ validate←{⎕IO←IO ⋄ expect}
     :Case 1 ⋄ validate←{⎕IO←IO ⋄ expect ⍵}
     :CaseList 2 ¯2 ⋄ validate←{⎕IO←IO ⋄ ⍺ expect ⍵}
     :EndSelect
 :Else
     'Validation operand is not a fn or var'⎕SIGNAL 2
 :EndSelect

 failure←0 ⋄ ⎕TRAP←0 'E' '(1↓∊(⎕UCS 13),[⎕IO+.5]⎕DM)⎕SIGNAL(''Fail''≢⊃⎕SI)/⎕EN ⋄ failure←1 ⋄ →⎕LC+1'
 :If 2=⎕NC'StopOnError' ⋄ :AndIf 2∊StopOnError ⋄ ⎕TRAP←0/⎕TRAP ⋄ :EndIf
 ⎕IO←IO ⋄ result←left testfn right
 ⎕IO←1 ⋄ ⎕TRAP←0/⎕TRAP

 :If ~failure
     rpt←'Test-fn ran to completion without signalling an error!'
 :ElseIf (⎕EN=6)∧(~(⎕UCS 13)∊⊃⎕DM)∧∨/'left testfn right'⍷⊃1↓⎕DM
     :If 'quadsignal.c'≡⊃⎕DMX.InternalLocation ⍝ Necessary to distinguish an explicit ⎕SIGNAL from a testing problem
         result←⎕EN(⊃⎕DM)
     :Else
         rpt←'Test-fn ran to completion without signalling an error!'
     :EndIf
 :ElseIf (⎕UCS 13)∊⊃⎕DM
     rpt←1↓∊(⎕UCS 13),[⎕IO+0.5]⎕DM
 :Else
     result←⎕EN(⊃⎕DM)
 :EndIf

 :If 0∊⍴rpt
     :Trap 0
         :If ~(1⊃result)validate 2⊃result
             rpt←'Validation failed for ⎕SIGNAL #',(⍕1⊃result),':',,(⎕UCS 13),⍕2⊃result
         :EndIf
     :Else
         rpt←'Validation processing function failed to complete!',∊(⎕UCS 13),[⎕IO+0.5]⎕DM
     :EndTrap
 :EndIf

 :If ~0∊⍴rpt
     :If 0=⎕NC'StopOnError' ⋄ :OrIf 1∊StopOnError ⋄ rpt ⎕SIGNAL 500 ⋄ :EndIf
     rpt,⍨←(⊃1↓⎕LC){⍵,(×⍴⍵)/'[',(⍕⍺),']: '}' '~⍨⊃1↓⎕SI
     :If 2=⎕NC'StopOnError' ⋄ :AndIf ¯1∊StopOnError ⋄ :AndIf 2=⎕NC'Errors' ⋄ Errors+←1 ⋄ :EndIf
 :EndIf
